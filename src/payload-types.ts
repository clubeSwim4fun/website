/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    users: User;
    groups: Group;
    'group-categories': GroupCategory;
    'user-media': UserMedia;
    events: Event;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    groups: GroupsSelect<false> | GroupsSelect<true>;
    'group-categories': GroupCategoriesSelect<false> | GroupCategoriesSelect<true>;
    'user-media': UserMediaSelect<false> | UserMediaSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: {
    type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?:
              | ({
                  relationTo: 'pages';
                  value: string | Page;
                } | null)
              | ({
                  relationTo: 'posts';
                  value: string | Post;
                } | null);
            url?: string | null;
            label: string;
            hasChildren?: boolean | null;
            childrenPages?:
              | {
                  reference: {
                    relationTo: 'pages';
                    value: string | Page;
                  };
                  label: string;
                  id?: string | null;
                }[]
              | null;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
    media?: (string | null) | Media;
  };
  layout: (CallToActionBlock | ContentBlock | MediaBlock | ArchiveBlock | FormBlock | Calendar)[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  parentPage?: (string | null) | Page;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  heroImage?: (string | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  surname?: string | null;
  nationality?:
    | (
        | 'Portugal'
        | 'Brasil'
        | 'Afghanistan'
        | 'Albania'
        | 'Algeria'
        | 'American Samoa'
        | 'Andorra'
        | 'Angola'
        | 'Anguilla'
        | 'Antarctica'
        | 'Antigua and Barbuda'
        | 'Argentina'
        | 'Armenia'
        | 'Aruba'
        | 'Australia'
        | 'Austria'
        | 'Azerbaijan'
        | 'Bahamas (the)'
        | 'Bahrain'
        | 'Bangladesh'
        | 'Barbados'
        | 'Belarus'
        | 'Belgium'
        | 'Belize'
        | 'Benin'
        | 'Bermuda'
        | 'Bhutan'
        | 'Bolivia (Plurinational State of)'
        | 'Bonaire, Sint Eustatius and Saba'
        | 'Bosnia and Herzegovina'
        | 'Botswana'
        | 'Bouvet Island'
        | 'British Indian Ocean Territory (the)'
        | 'Brunei Darussalam'
        | 'Bulgaria'
        | 'Burkina Faso'
        | 'Burundi'
        | 'Cabo Verde'
        | 'Cambodia'
        | 'Cameroon'
        | 'Canada'
        | 'Cayman Islands (the)'
        | 'Central African Republic (the)'
        | 'Chad'
        | 'Chile'
        | 'China'
        | 'Christmas Island'
        | 'Cocos (Keeling) Islands (the)'
        | 'Colombia'
        | 'Comoros (the)'
        | 'Congo (the Democratic Republic of the)'
        | 'Congo (the)'
        | 'Cook Islands (the)'
        | 'Costa Rica'
        | 'Croatia'
        | 'Cuba'
        | 'Curaçao'
        | 'Cyprus'
        | 'Czechia'
        | "Côte d'Ivoire"
        | 'Denmark'
        | 'Djibouti'
        | 'Dominica'
        | 'Dominican Republic (the)'
        | 'Ecuador'
        | 'Egypt'
        | 'El Salvador'
        | 'Equatorial Guinea'
        | 'Eritrea'
        | 'Estonia'
        | 'Eswatini'
        | 'Ethiopia'
        | 'Falkland Islands (the) [Malvinas]'
        | 'Faroe Islands (the)'
        | 'Fiji'
        | 'Finland'
        | 'France'
        | 'French Guiana'
        | 'French Polynesia'
        | 'French Southern Territories (the)'
        | 'Gabon'
        | 'Gambia (the)'
        | 'Georgia'
        | 'Germany'
        | 'Ghana'
        | 'Gibraltar'
        | 'Greece'
        | 'Greenland'
        | 'Grenada'
        | 'Guadeloupe'
        | 'Guam'
        | 'Guatemala'
        | 'Guernsey'
        | 'Guinea'
        | 'Guinea-Bissau'
        | 'Guyana'
        | 'Haiti'
        | 'Heard Island and McDonald Islands'
        | 'Holy See (the)'
        | 'Honduras'
        | 'Hong Kong'
        | 'Hungary'
        | 'Iceland'
        | 'India'
        | 'Indonesia'
        | 'Iran (Islamic Republic of)'
        | 'Iraq'
        | 'Ireland'
        | 'Isle of Man'
        | 'Israel'
        | 'Italy'
        | 'Jamaica'
        | 'Japan'
        | 'Jersey'
        | 'Jordan'
        | 'Kazakhstan'
        | 'Kenya'
        | 'Kiribati'
        | "Korea (the Democratic People's Republic of)"
        | 'Korea (the Republic of)'
        | 'Kuwait'
        | 'Kyrgyzstan'
        | "Lao People's Democratic Republic (the)"
        | 'Latvia'
        | 'Lebanon'
        | 'Lesotho'
        | 'Liberia'
        | 'Libya'
        | 'Liechtenstein'
        | 'Lithuania'
        | 'Luxembourg'
        | 'Macao'
        | 'Madagascar'
        | 'Malawi'
        | 'Malaysia'
        | 'Maldives'
        | 'Mali'
        | 'Malta'
        | 'Marshall Islands (the)'
        | 'Martinique'
        | 'Mauritania'
        | 'Mauritius'
        | 'Mayotte'
        | 'Mexico'
        | 'Micronesia (Federated States of)'
        | 'Moldova (the Republic of)'
        | 'Monaco'
        | 'Mongolia'
        | 'Montenegro'
        | 'Montserrat'
        | 'Morocco'
        | 'Mozambique'
        | 'Myanmar'
        | 'Namibia'
        | 'Nauru'
        | 'Nepal'
        | 'Netherlands (the)'
        | 'New Caledonia'
        | 'New Zealand'
        | 'Nicaragua'
        | 'Niger (the)'
        | 'Nigeria'
        | 'Niue'
        | 'Norfolk Island'
        | 'Northern Mariana Islands (the)'
        | 'Norway'
        | 'Oman'
        | 'Pakistan'
        | 'Palau'
        | 'Palestine, State of'
        | 'Panama'
        | 'Papua New Guinea'
        | 'Paraguay'
        | 'Peru'
        | 'Philippines (the)'
        | 'Pitcairn'
        | 'Poland'
        | 'Puerto Rico'
        | 'Qatar'
        | 'Republic of North Macedonia'
        | 'Romania'
        | 'Russian Federation (the)'
        | 'Rwanda'
        | 'Réunion'
        | 'Saint Barthélemy'
        | 'Saint Helena, Ascension and Tristan da Cunha'
        | 'Saint Kitts and Nevis'
        | 'Saint Lucia'
        | 'Saint Martin (French part)'
        | 'Saint Pierre and Miquelon'
        | 'Saint Vincent and the Grenadines'
        | 'Samoa'
        | 'San Marino'
        | 'Sao Tome and Principe'
        | 'Saudi Arabia'
        | 'Senegal'
        | 'Serbia'
        | 'Seychelles'
        | 'Sierra Leone'
        | 'Singapore'
        | 'Sint Maarten (Dutch part)'
        | 'Slovakia'
        | 'Slovenia'
        | 'Solomon Islands'
        | 'Somalia'
        | 'South Africa'
        | 'South Georgia and the South Sandwich Islands'
        | 'South Sudan'
        | 'Spain'
        | 'Sri Lanka'
        | 'Sudan (the)'
        | 'Suriname'
        | 'Svalbard and Jan Mayen'
        | 'Sweden'
        | 'Switzerland'
        | 'Syrian Arab Republic'
        | 'Taiwan'
        | 'Tajikistan'
        | 'Tanzania, United Republic of'
        | 'Thailand'
        | 'Timor-Leste'
        | 'Togo'
        | 'Tokelau'
        | 'Tonga'
        | 'Trinidad and Tobago'
        | 'Tunisia'
        | 'Turkey'
        | 'Turkmenistan'
        | 'Turks and Caicos Islands (the)'
        | 'Tuvalu'
        | 'Uganda'
        | 'Ukraine'
        | 'United Arab Emirates (the)'
        | 'United Kingdom of Great Britain and Northern Ireland (the)'
        | 'United States Minor Outlying Islands (the)'
        | 'United States of America (the)'
        | 'Uruguay'
        | 'Uzbekistan'
        | 'Vanuatu'
        | 'Venezuela (Bolivarian Republic of)'
        | 'Viet Nam'
        | 'Virgin Islands (British)'
        | 'Virgin Islands (U.S.)'
        | 'Wallis and Futuna'
        | 'Western Sahara'
        | 'Yemen'
        | 'Zambia'
        | 'Zimbabwe'
        | 'Åland Islands'
      )
    | null;
  phone?: string | null;
  identity?: string | null;
  identityFile?: (string | null) | UserMedia;
  profilePicture?: (string | null) | Media;
  role?: ('admin' | 'editor' | 'default') | null;
  nif?: string | null;
  gender?: ('masculino' | 'feminino') | null;
  groups?:
    | (
        | {
            relationTo: 'groups';
            value: string | Group;
          }
        | {
            relationTo: 'group-categories';
            value: string | GroupCategory;
          }
      )[]
    | null;
  birthDate?: string | null;
  disability?:
    | ('Nenhuma' | 'Auditiva' | 'Intelectual' | 'Motora' | 'Paralisia Cerebral' | 'Visual' | 'Transplantado')
    | null;
  wantsToBeFederado?: boolean | null;
  heardAboutClub?: ('Internet' | 'Amigos' | 'Escola Swim4Fun' | 'Outros') | null;
  Address?: {
    street?: string | null;
    number?: string | null;
    state?: string | null;
    zipcode?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-media".
 */
export interface UserMedia {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups".
 */
export interface Group {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "group-categories".
 */
export interface GroupCategory {
  id: string;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (string | null) | Group;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          hasChildren?: boolean | null;
          childrenPages?:
            | {
                reference: {
                  relationTo: 'pages';
                  value: string | Page;
                };
                label: string;
                id?: string | null;
              }[]
            | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          hasChildren?: boolean | null;
          childrenPages?:
            | {
                reference: {
                  relationTo: 'pages';
                  value: string | Page;
                };
                label: string;
                id?: string | null;
              }[]
            | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: string | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  isRegistrationForm?: boolean | null;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | Checkbox
        | Country
        | Email
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | Number
        | Select
        | Text
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
        | Password
        | Phone
        | MediaUpload
        | Address
        | DateField
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Checkbox".
 */
export interface Checkbox {
  name: string;
  label: string;
  defaultValue?: boolean | null;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'checkbox';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Country".
 */
export interface Country {
  name: string;
  label: string;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'country';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Email".
 */
export interface Email {
  name: string;
  label: string;
  defaultValue?: string | null;
  required?: boolean | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'email';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Number".
 */
export interface Number {
  name: string;
  label: string;
  defaultValue?: number | null;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'number';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Select".
 */
export interface Select {
  name: string;
  label: string;
  defaultValue?: string | null;
  options?:
    | {
        label: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'select';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Text".
 */
export interface Text {
  name: string;
  label: string;
  defaultValue?: string | null;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Password".
 */
export interface Password {
  name: string;
  label: string;
  hasConfirmPassword?: boolean | null;
  confirmLabel?: string | null;
  errorPassword?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'password';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Phone".
 */
export interface Phone {
  name: string;
  label: string;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'phone';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaUpload".
 */
export interface MediaUpload {
  name: string;
  label: string;
  media?: (string | null) | Media;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'media';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Address".
 */
export interface Address {
  name: string;
  label: string;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  address?: {
    streetLabel?: string | null;
    streetSize?: ('full' | 'half' | 'one-third') | null;
    streetRequired?: boolean | null;
    numberLabel?: string | null;
    numberSize?: ('full' | 'half' | 'one-third') | null;
    numberRequired?: boolean | null;
    stateLabel?: string | null;
    stateSize?: ('full' | 'half' | 'one-third') | null;
    stateRequired?: boolean | null;
    zipcodeLabel?: string | null;
    zipSize?: ('full' | 'half' | 'one-third') | null;
    zipRequired?: boolean | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'address';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DateField".
 */
export interface DateField {
  name: string;
  label: string;
  placeholder: string;
  required?: boolean | null;
  relatesTo?:
    | (
        | 'name'
        | 'surname'
        | 'nationality'
        | 'phone'
        | 'identity'
        | 'identityFile'
        | 'profilePicture'
        | 'role'
        | 'nif'
        | 'gender'
        | 'groups'
        | 'birthDate'
        | 'disability'
        | 'wantsToBeFederado'
        | 'heardAboutClub'
        | 'Address'
      )
    | null;
  size?: ('full' | 'half' | 'one-third') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'datePicker';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Calendar".
 */
export interface Calendar {
  defaultView?: ('day' | 'week' | 'month') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'calendarBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  title: string;
  description: string;
  start: string;
  end: string;
  backgroundColor?: ('#B2E0B2' | '#AEC6E4' | '#FFD1DC') | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        isArray?: boolean | null;
        value?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: string | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: string;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'groups';
        value: string | Group;
      } | null)
    | ({
        relationTo: 'group-categories';
        value: string | GroupCategory;
      } | null)
    | ({
        relationTo: 'user-media';
        value: string | UserMedia;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: string | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    hasChildren?: T;
                    childrenPages?:
                      | T
                      | {
                          reference?: T;
                          label?: T;
                          id?: T;
                        };
                    appearance?: T;
                  };
              id?: T;
            };
        media?: T;
      };
  layout?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        calendarBlock?: T | CalendarSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  parentPage?: T;
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              hasChildren?: T;
              childrenPages?:
                | T
                | {
                    reference?: T;
                    label?: T;
                    id?: T;
                  };
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              hasChildren?: T;
              childrenPages?:
                | T
                | {
                    reference?: T;
                    label?: T;
                    id?: T;
                  };
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  isRegistrationForm?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Calendar_select".
 */
export interface CalendarSelect<T extends boolean = true> {
  defaultView?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  surname?: T;
  nationality?: T;
  phone?: T;
  identity?: T;
  identityFile?: T;
  profilePicture?: T;
  role?: T;
  nif?: T;
  gender?: T;
  groups?: T;
  birthDate?: T;
  disability?: T;
  wantsToBeFederado?: T;
  heardAboutClub?: T;
  Address?:
    | T
    | {
        street?: T;
        number?: T;
        state?: T;
        zipcode?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "groups_select".
 */
export interface GroupsSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "group-categories_select".
 */
export interface GroupCategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-media_select".
 */
export interface UserMediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  start?: T;
  end?: T;
  backgroundColor?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?: T | CheckboxSelect<T>;
        country?: T | CountrySelect<T>;
        email?: T | EmailSelect<T>;
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?: T | NumberSelect<T>;
        select?: T | SelectSelect<T>;
        text?: T | TextSelect<T>;
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        password?: T | PasswordSelect<T>;
        phone?: T | PhoneSelect<T>;
        media?: T | MediaUploadSelect<T>;
        address?: T | AddressSelect<T>;
        datePicker?: T | DateFieldSelect<T>;
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Checkbox_select".
 */
export interface CheckboxSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  defaultValue?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Country_select".
 */
export interface CountrySelect<T extends boolean = true> {
  name?: T;
  label?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Email_select".
 */
export interface EmailSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  defaultValue?: T;
  required?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Number_select".
 */
export interface NumberSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  defaultValue?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Select_select".
 */
export interface SelectSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  defaultValue?: T;
  options?:
    | T
    | {
        label?: T;
        value?: T;
        id?: T;
      };
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Text_select".
 */
export interface TextSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  defaultValue?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Password_select".
 */
export interface PasswordSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  hasConfirmPassword?: T;
  confirmLabel?: T;
  errorPassword?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Phone_select".
 */
export interface PhoneSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaUpload_select".
 */
export interface MediaUploadSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  media?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Address_select".
 */
export interface AddressSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  relatesTo?: T;
  address?:
    | T
    | {
        streetLabel?: T;
        streetSize?: T;
        streetRequired?: T;
        numberLabel?: T;
        numberSize?: T;
        numberRequired?: T;
        stateLabel?: T;
        stateSize?: T;
        stateRequired?: T;
        zipcodeLabel?: T;
        zipSize?: T;
        zipRequired?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "DateField_select".
 */
export interface DateFieldSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  placeholder?: T;
  required?: T;
  relatesTo?: T;
  size?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        isArray?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  logo?: (string | null) | Media;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          hasChildren?: boolean | null;
          childrenPages?:
            | {
                reference: {
                  relationTo: 'pages';
                  value: string | Page;
                };
                label: string;
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: string | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: string | Post;
              } | null);
          url?: string | null;
          label: string;
          hasChildren?: boolean | null;
          childrenPages?:
            | {
                reference: {
                  relationTo: 'pages';
                  value: string | Page;
                };
                label: string;
                id?: string | null;
              }[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              hasChildren?: T;
              childrenPages?:
                | T
                | {
                    reference?: T;
                    label?: T;
                    id?: T;
                  };
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              hasChildren?: T;
              childrenPages?:
                | T
                | {
                    reference?: T;
                    label?: T;
                    id?: T;
                  };
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    global?: string | null;
    user?: (string | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}